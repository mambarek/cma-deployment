
Das Projekt besteht aus drei Springboot Microservices, ein Angular10 UI App und ein Message Broker (Active MQ Artemis)
Die Microservice kommunizieren untereinander via Message Queue um Daten auszutauschen. 
Die Angular UI benutzt RESTful Services um Daten mit dem Backend auszutauschen.

Die Microservices basieren auf dem OpenAPI Standard. Es werden OpenAPI Definition für jeden Service erstellt. 
Aus diese Definitionen werden mit Hilfe von OpenAPI Generator, aus GitHub die Definitionen mit Maven geladen und stubs und Services für
das Backend und Frontend generiert. Dies spart viel Zeit und stellt sicher dass die Domain Entities überall gleich sind. 
Die Domain objekte werde mit Hilfe von MapStruct in JPA-Entities gemappt.

Die Angular App verfügt über wiederverwendbare Eingabefleder und Komponenten. Die Eingabefleder validieren sich selbständig 
und markieren sich gegebenfalls als Mussfelder wenn nötig. Sie übernehmen so mit viele Arbieten die sich wiederholen und 
kapseln dies an eine Zentrale Stelle, dies sorgt für einheitliches Verhalten und erleichtert die Pflege und weiterentwicklung der Anwendung.
Mit Hilfe von OpenAPI Generator generiert man für die benötigten Services die Model Klassen und die Http Services um auf die Services zu zugreifen.
Dadurch spart man sich viel Arbeit um das Anlegen diese Klassen. In Kombination mit den generischen Eingabefleder wird somit ein Formular um einen Datensatz
zu Bearbeiten in sehr kurtzer Zeit realsiert. Die App wurde ausführlich mit Jasmine und teilweise mit Cypress getestet.

Technologie: J2EE, Java11, JPA, Microservices, SAGA, Spring State Machine, Springboot, MapStruct, Lombok, OpenAPI, OpenAPI Generator, SwaggerUI, 
Active MQ Artemis, RESTful WebServices, Docker, Docker Compose, Kubernetis, minikube,
Angular 10, Jasmine, Cypress, Bootstrap, Postgres DB, Nexus, Maven, Git, GitHub.